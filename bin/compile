#!/usr/bin/env bash

set -e
set -x

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

export_dir=$1/.export.d
mkdir -p $export_dir

for BUILDPACK in $(cat $1/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  subdir=""
  if [[ $BUILDPACK == *'='* ]]; then
    subdir=$(echo $BUILDPACK | cut -d"=" -f 1)
    BUILDPACK=$(echo $BUILDPACK | cut -d"=" -f 2)
  fi

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url, branch: $branch, to tmp dir $dir, against source's subdir: $subdir"

    if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1/$subdir)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      echo "-----> Compiling with BUILD_DIR: $1, SUB_DIR: $subdir"
      $dir/bin/compile $1 $2 $3 $subdir

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        echo "-----> Sourcing $dir/export"
        cat $dir/export
        source $dir/export
        echo "-----> Copying to $export_dir/$subdir"
        cp -v $dir/export $export_dir/$subdir
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/last_pack_release.out
      fi
    else
      echo "Couldn't detect any framework for this buildpack. Exiting."
      exit 1
    fi
  fi
done

if [[ -e $1/last_pack_release.out ]]; then
  echo "Using release configuration from last framework ($framework)."
fi

cd $1

if [[ -e .Buildfile ]]; then
    echo "-----> Buildfile content:"
    cat .Buildfile
    echo "-----> PWD=$PWD"
    echo "-----> PATH=$PATH"
    echo "-----> PYTHONPATH=$PYTHONPATH"
    echo "-----> PYTHONHOME=$PYTHONHOME"
    echo "-----> ls"
    ls
    echo "-----> ls .heroku"
    ls .heroku
    echo "-----> ls .heroku/python"
    ls .heroku/python
    find .heroku/python | head 200

    source .Buildfile
fi
